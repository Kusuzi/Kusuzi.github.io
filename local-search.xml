<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2021/12/10/Redis/"/>
    <url>/2021/12/10/Redis/</url>
    
    <content type="html"><![CDATA[<p> 本篇文章是根据<a href="https://www.bilibili.com/video/BV1CJ411m7Gc">黑马程序员</a>出品的视频，学习所做的笔记</p><h1 id="1-Redis的简单介绍"><a href="#1-Redis的简单介绍" class="headerlink" title="1. Redis的简单介绍"></a>1. Redis的简单介绍</h1><p><strong>概念：</strong>Redis (REmote DIctionary Server) 是用 C 语言开发的一个开源的<em>高性能键值对（key-value）数据库。</em></p><p><strong>类型</strong>：非关系型数据库（Nosql）</p><p><strong>特征：</strong></p><ul><li>可扩容，可伸缩</li><li>大数据量下高性能</li><li>灵活的数据模型</li><li>高可用</li></ul><p><strong>关键词：</strong>单线程、高性能、多数据类型、持久化</p><h1 id="2-Redis的应用"><a href="#2-Redis的应用" class="headerlink" title="2. Redis的应用"></a>2. Redis的应用</h1><ul><li>为热点数据加速查询（主要场景），如热点商品、热点新闻、热点资讯、推广类等高访问量信息等</li><li>任务队列，如秒杀、抢购、购票排队等</li><li>即时信息查询，如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息（聊天室、网站）、设<br>备信号等 </li><li>时效性信息控制，如验证码控制、投票控制等</li><li>分布式数据共享，如分布式集群架构中的 session 分离</li><li>消息队列</li><li>分布式锁</li></ul><h1 id="3-Redis的五大数据类型"><a href="#3-Redis的五大数据类型" class="headerlink" title="3. Redis的五大数据类型"></a>3. Redis的五大数据类型</h1><p>​        <strong>redis                             java</strong></p><ul><li><p>String                          String</p></li><li><p>hash                          HashMap</p></li><li><p>list                             LinkedList</p></li><li><p>set                              HashSet</p></li><li><p>sortedset(zset)          TreeSet</p><p>数据类型指的是存储的数据的类型，也就是 value 部分的类型，key 部分永远都是字符串</p></li></ul><h1 id="4-Redis对不同数据类型的常见命令"><a href="#4-Redis对不同数据类型的常见命令" class="headerlink" title="4. Redis对不同数据类型的常见命令"></a>4. Redis对不同数据类型的常见命令</h1><h2 id="4-1-String"><a href="#4-1-String" class="headerlink" title="4.1 String"></a>4.1 String</h2><ul><li> 存储的数据：单个数据，最简单的数据存储类型，也是最常用的数据存储类型</li><li> 存储数据的格式：一个存储空间保存一个数据</li><li>存储内容：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用</li></ul><h2 id="4-1-1-数据类型的命令"><a href="#4-1-1-数据类型的命令" class="headerlink" title="4.1.1 数据类型的命令"></a>4.1.1 数据类型的命令</h2><blockquote><p><strong>set</strong> key value                                        [添加/修改单条数据]</p><p><strong>mset</strong> key1 value1 key2 value2 … 【添加/修改多条数据】</p><p><strong>get</strong> key                                                      [获取单条数据]</p><p><strong>mget</strong> key1 key2 …                                【获取多条数据】</p><p><strong>del</strong> key                                                          [删除数据]</p><p><strong>strlen</strong> key                                    【获取数据字符个数（字符串长度）】</p><p><strong>append</strong> key value       [ 追加信息到原始信息后部（如果原始信息存在就追加，否则新建）]</p></blockquote><p>set 和 mset之间的选择问题：如果查询数据量较多时，可以选择mset来节约服务器与redis之间的往返时间</p><blockquote><p><strong>incr</strong> key                                                 【为某一个key做自增操作，++key】<br><strong>incrby</strong> key increment                         【为某一个key加上increment，但只能是整数】<br><strong>incrbyfloat</strong> key increment                  【为某一个key加上increment，可以是小数】</p><p><strong>decr</strong> key<br><strong>decrby</strong> key increment</p><p><strong>setex</strong> key  second value                       【设置key的生命周期】</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>learn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
